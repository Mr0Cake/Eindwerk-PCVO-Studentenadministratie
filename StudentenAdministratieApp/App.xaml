<Application x:Class="StudentenAdministratieApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:local="clr-namespace:StudentenAdministratieApp"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <!-- Accent and AppTheme setting -->
                <ResourceDictionary Source="/Resources/Icons.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Green.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
                <!-- Custom Dictionary-->
            </ResourceDictionary.MergedDictionaries>
            <SolidColorBrush x:Key="tabcontrolBG" Color="LightGray"></SolidColorBrush>
            <Style x:Key="SmallTabItem"  BasedOn="{StaticResource MetroTabItem}" TargetType="{x:Type TabItem}">
                <Setter Property="mah:ControlsHelper.HeaderFontSize" Value="18"></Setter>
            </Style>

            <ControlTemplate x:Key="DefaultErrorTemplate">
                <Grid x:Name="container">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <AdornedElementPlaceholder Grid.Column="0"
										   Name="customAdorner"
										   VerticalAlignment="Center">
                    </AdornedElementPlaceholder>

                    <Border x:Name="ValidationErrorElement"
						BorderBrush="#FFDB000C"
						BorderThickness="1"
						CornerRadius="1"
						ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                        <Grid Background="Transparent"
						  HorizontalAlignment="Right"
						  Height="12"
						  Margin="0,0,3,0"
						  VerticalAlignment="Center"
						  Width="12">
                            <Rectangle Width="12" Height="12" Fill="Red">
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_alert}"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>

                        </Grid>
                    </Border>
                </Grid>
            </ControlTemplate>

            <ImageBrush x:Key="BackgroundImage" ImageSource="background.jpg"/>
            <DropShadowBitmapEffect x:Key="dropShadow" Color="Black" Direction="180" ShadowDepth="5" Softness="1" Opacity="0.2"/>

            <SolidColorBrush x:Key="NullColor" Color="#FFB60000"></SolidColorBrush>
            <SolidColorBrush x:Key="TrueColor" Color="#FF10AE09"  ></SolidColorBrush>
            <SolidColorBrush x:Key="FalseColor" Color="Black"></SolidColorBrush>
            <SolidColorBrush x:Key="BGColor1" Color="#FFC9D8BB"/>
            <SolidColorBrush x:Key="BGColor2" Color="White"/>
            <SolidColorBrush x:Key="SoftBlack" Color="#232b2b"/>
            <SolidColorBrush x:Key="BorderColor" Color="#80BA45"/>
            <SolidColorBrush x:Key="WhiteText" Color="White"/>

            <Geometry x:Key="CheckTrue">M22.785004,8.4599915L13.740021,17.51001 9.2100067,12.980011 6.2000122,16 13.740021,23.545013 25.804993,11.480011z M16,0C24.834991,0 32,7.1700134 32,16 32,24.834991 24.834991,32 16,32 7.1699982,32 0,24.834991 0,16 0,7.1700134 7.1699982,0 16,0z</Geometry>
            <Geometry x:Key="CheckNull">M20.200012,8.4000015L16,12.599998 11.800049,8.5 8.4000244,11.900002 12.600037,16.099998 8.4000244,20.300003 11.800049,23.699997 16,19.5 20.200012,23.699997 23.600037,20.300003 19.400024,16 23.600037,11.800003z M16,0C24.800049,0 32,7.1999969 32,16 32,24.800003 24.800049,32 16,32 7.2000122,32 0,24.800003 0,16 0,7.1999969 7.2000122,0 16,0z</Geometry>
            <Geometry x:Key="CheckFalse">M16,1.881958C8.2160034,1.881958 1.882019,8.2149658 1.882019,16 1.882019,23.784973 8.2160034,30.116943 16,30.116943 23.783997,30.116943 30.118042,23.784973 30.118042,16 30.118042,8.2149658 23.783997,1.881958 16,1.881958z M16,0C24.822998,0 32,7.1769409 32,16 32,24.82196 24.822998,32 16,32 7.177002,32 0,24.82196 0,16 0,7.1769409 7.177002,0 16,0z</Geometry>


            <SolidColorBrush x:Key="TransparantBrush" Color="White" Opacity="0"/>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Foreground" Value="{StaticResource SoftBlack}"/>
                <Setter Property="Validation.ErrorTemplate"
					Value="{StaticResource DefaultErrorTemplate}" />
            </Style>
            <Style TargetType="{x:Type PasswordBox}">
                <Setter Property="Validation.ErrorTemplate"
					Value="{StaticResource DefaultErrorTemplate}" />
            </Style>



            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="Background" Value="{StaticResource TransparantBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TransparantBrush}"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}" >

                            <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                            <BulletDecorator Background="Transparent">
                                <BulletDecorator.Bullet>
                                    <Grid Width="16" Height="16">
                                        <Path x:Name="disabledValue" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckFalse}" Fill="Gray" Stretch="Fill"/>
                                        <Path x:Name="NullValue" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckNull}" Fill="{StaticResource NullColor}" Stretch="Fill" />
                                        <Path x:Name="CheckMark" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckTrue}" Fill="{StaticResource TrueColor}" Stretch="Fill"/>
                                        <Path x:Name="FalseValue" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckFalse}" Fill="{StaticResource FalseColor}" Stretch="Fill"/>
                                    </Grid>
                                </BulletDecorator.Bullet>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                            </BulletDecorator>
                            <ControlTemplate.Triggers>

                                <Trigger Property="IsChecked" Value="false">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="NullValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="disabledValue"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="FalseValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="disabledValue"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="NullValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="FalseValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="disabledValue"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Visibility" Value="Visible" TargetName="disabledValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="NullValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="FalseValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="LockBox" TargetType="{x:Type CheckBox}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="Background" Value="{StaticResource TransparantBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TransparantBrush}"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}" >

                            <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                            <BulletDecorator Background="Transparent">
                                <BulletDecorator.Bullet>
                                    <Grid Width="16" Height="16">
                                        <Rectangle x:Name="disabledValue" Width="14" Height="16" Fill="Gray">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_lock}"/>
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                        <Rectangle x:Name="NullValue" Width="14" Height="16" Fill="{StaticResource SoftBlack}" ToolTip="Behandel Ticket">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_lock}"/>
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                        <Rectangle x:Name="CheckMark" Width="14" Height="16" Fill="{StaticResource TrueColor}" ToolTip="Stop met behandelen">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_lock}"/>
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                        <Rectangle x:Name="FalseValue" Width="14" Height="16" Fill="{StaticResource NullColor}" ToolTip="In Behandeling">
                                            <Rectangle.OpacityMask>
                                                <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_lock}"/>
                                            </Rectangle.OpacityMask>
                                        </Rectangle>
                                        <!--<Path x:Name="disabledValue" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckFalse}" Fill="Gray" Stretch="Fill"/>-->
                                        <!--<Path x:Name="NullValue" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckNull}" Fill="{StaticResource NullColor}" Stretch="Fill" />-->
                                        <!--<Path x:Name="CheckMark" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckTrue}" Fill="{StaticResource TrueColor}" Stretch="Fill"/>-->
                                        <!--<Path x:Name="FalseValue" StrokeThickness="2" SnapsToDevicePixels="False" Data="{StaticResource CheckFalse}" Fill="{StaticResource FalseColor}" Stretch="Fill"/>-->
                                    </Grid>
                                </BulletDecorator.Bullet>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                            </BulletDecorator>
                            <ControlTemplate.Triggers>

                                <Trigger Property="IsChecked" Value="false">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="NullValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="disabledValue"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="FalseValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="disabledValue"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="NullValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="FalseValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="disabledValue"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Visibility" Value="Visible" TargetName="disabledValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="NullValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="FalseValue"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="shadowBorder" TargetType="{x:Type Border}">
                <Setter Property="Margin" Value="3"/>
                <Setter Property="Background" Value="{StaticResource BGColor2}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BorderColor}"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="BitmapEffect" Value="{StaticResource dropShadow}"/>
            </Style>
            <!--<Style x:Name="CenteredCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                <Setter Property="HorizontalAlignment" Value="Center"></Setter>
            </Style>-->

            <Style x:Key="centeredcheckbox" BasedOn="{StaticResource {x:Type CheckBox}}" TargetType="{x:Type CheckBox}">
                <Setter Property="HorizontalAlignment" Value="Center"></Setter>
            </Style>
            <Style TargetType="{x:Type DataGridCheckBoxColumn}">
                <Setter Property="ElementStyle" Value="{StaticResource centeredcheckbox}"/>
                
            </Style>

            <Style TargetType="{x:Type Label}">
                <Setter Property="Foreground" Value="{StaticResource SoftBlack}"/>
                <Setter Property="FontFamily" Value="Segoe UI"/>
                <Setter Property="FontSize" Value="18"/>
            </Style>

            <!--<Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{StaticResource SoftBlack}"/>
            </Style>-->

            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="Foreground" Value="{StaticResource SoftBlack}"/>
            </Style>

            <!--
            <Style x:Name="SelectedLabelStyle" TargetType="Label">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True">
                        <Setter Property="Label.Foreground" Value="White"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>-->

            <!--<Style x:Name="rightTextColumn" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Right"/>
            </Style>-->
            
            <!--scrollbar-->

            <Style  TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsFlicksEnabled" Value="True" />
                <Style.Triggers>
                    <!--<Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Height" Value="40" />
                        <Setter Property="MinHeight" Value="40" />
                    </Trigger>-->
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="8" />
                        <Setter Property="MinWidth" Value="8" />
                    </Trigger>
                </Style.Triggers>
            </Style>


        </ResourceDictionary>
    </Application.Resources>
</Application>
